---

- hosts: k8s
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present


  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - "docker-ce=5:19.03.15~3-0~ubuntu-xenial"
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

# Disable swap space
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0    

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present


# Add kubernetes repository and install kubelet, kubeadm and kubectl packages
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.19.0-00
        - kubeadm=1.19.0-00
        - kubectl=1.19.0-00

  # Initialize the cluster using kubeadm
  - name: Copy the deamon json
    copy: src=../files/daemon.json dest=/etc/docker/daemon.json

  - name: Restart Docker
    service:
      name: docker
      daemon_reload: yes
      state: restarted

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  handlers:
    - name: docker status
      service: name=docker state=started

